<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>An introduction to Ruby `*`Splat and double `**`Splat operators</title>
      <link href="/2019/04/03/rubys-splat-and-double-splat-operators/"/>
      <url>/2019/04/03/rubys-splat-and-double-splat-operators/</url>
      
        <content type="html"><![CDATA[<h3 id="Single-Splat"><a href="#Single-Splat" class="headerlink" title="Single *Splat"></a>Single *Splat</h3><p>当你不指定方法有多少个参数是可以使用<code>*</code>去收集，下面是一个简单的例子<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unknown_amount</span><span class="params">(*args)</span></span></span><br><span class="line">  p args</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">unknown_amount(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># =&gt; [1,2,3]</span></span><br></pre></td></tr></table></figure></p><p>上面的例子吧所有的参数都传入到一个args的Array中，使用时通过下标获取</p><h3 id="Double-Splat"><a href="#Double-Splat" class="headerlink" title="Double **Splat"></a>Double **Splat</h3><p><code>**</code>的方法是与<code>*</code>相似 主要是用来收集hash结构的参数类型，例子如下:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doublesplat</span><span class="params">(**nums)</span></span></span><br><span class="line">  p **nums</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">doublesplat <span class="symbol">one:</span> <span class="number">1</span>, <span class="symbol">two:</span> <span class="number">2</span></span><br><span class="line"><span class="comment"># =&gt; &#123;:one=&gt;1, :two=&gt;2&#125;</span></span><br></pre></td></tr></table></figure></p><p>其他例子：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, *b, **c)</span></span></span><br><span class="line">  [a, b, c]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">&gt; foo <span class="number">10</span></span><br><span class="line">=&gt; [<span class="number">10</span>, [], &#123;&#125;]</span><br><span class="line">&gt; foo <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span></span><br><span class="line">=&gt; [<span class="number">10</span>, [<span class="number">20</span>, <span class="number">30</span>], &#123;&#125;]</span><br><span class="line">&gt; foo <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="symbol">d:</span> <span class="number">40</span>, <span class="symbol">e:</span> <span class="number">50</span></span><br><span class="line">=&gt; [<span class="number">10</span>, [<span class="number">20</span>, <span class="number">30</span>], &#123;<span class="symbol">:d=&gt;</span><span class="number">40</span>, <span class="symbol">:e=&gt;</span><span class="number">50</span>&#125;]</span><br><span class="line">&gt; foo <span class="number">10</span>, <span class="symbol">d:</span> <span class="number">40</span>, <span class="symbol">e:</span> <span class="number">50</span></span><br><span class="line">=&gt; [<span class="number">10</span>, [], &#123;<span class="symbol">:d=&gt;</span><span class="number">40</span>, <span class="symbol">:e=&gt;</span><span class="number">50</span>&#125;]</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Use neo4j-rake_tasks create test environment</title>
      <link href="/2019/03/21/use-neo4j-rake-tasks-create-test-environment/"/>
      <url>/2019/03/21/use-neo4j-rake-tasks-create-test-environment/</url>
      
        <content type="html"><![CDATA[<h3 id="rails-neo4j测试环境"><a href="#rails-neo4j测试环境" class="headerlink" title="rails neo4j测试环境"></a>rails neo4j测试环境</h3><p>要运行测试，必须运行Neo4j服务器（理想情况下，服务器与不同端口上的开发数据库不同）。启动并运行测试数据库的一种快捷方法是使用内置的rake任务</p><h4 id="安装与配置环境"><a href="#安装与配置环境" class="headerlink" title="安装与配置环境"></a>安装与配置环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># install neo4j test version</span><br><span class="line">rake neo4j:install[community-latest,test]</span><br><span class="line"># or a specific version</span><br><span class="line">rake neo4j:install[community-3.4.1,test]</span><br></pre></td></tr></table></figure><p>在config/neo4j.yml 中配置url的端口, 与development的端口不相同<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test:</span><br><span class="line">  type: http</span><br><span class="line">  url: http://localhost:7475</span><br></pre></td></tr></table></figure></p><h4 id="启动neo4j的测试环境"><a href="#启动neo4j的测试环境" class="headerlink" title="启动neo4j的测试环境"></a>启动neo4j的测试环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake neo4j:start[test]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Use after_commit to replace after_create</title>
      <link href="/2019/03/21/use-after-commit-to-replace-after-create/"/>
      <url>/2019/03/21/use-after-commit-to-replace-after-create/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ruby 2.5 added Hash#slice method</title>
      <link href="/2019/01/21/Ruby-2-5-added-Hash-slice-method/"/>
      <url>/2019/01/21/Ruby-2-5-added-Hash-slice-method/</url>
      
        <content type="html"><![CDATA[<h3 id="Ruby-2-4"><a href="#Ruby-2-4" class="headerlink" title="Ruby 2.4"></a>Ruby 2.4</h3><p>Let’s say that we have a hash { id: 1, name: ‘Ruby 2.5’, description: ‘BigBinary Blog’ } and we want to select key value pairs having keys name and description.</p><p>We can use <a href="https://ruby-doc.org/core-2.4.2/Hash.html#method-i-select" target="_blank" rel="noopener">Hash#select</a> method.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">irb&gt; blog = &#123; <span class="symbol">id:</span> <span class="number">1</span>, <span class="symbol">name:</span> <span class="string">'Ruby 2.5'</span>, <span class="symbol">description:</span> <span class="string">'BigBinary Blog'</span> &#125;</span><br><span class="line">  =&gt; &#123;<span class="symbol">:id=&gt;</span><span class="number">1</span>, <span class="symbol">:name=&gt;<span class="string">"Ruby 2.5"</span></span>, <span class="symbol">:description=&gt;<span class="string">"BigBinary Blog"</span></span>&#125;</span><br><span class="line"></span><br><span class="line">irb&gt; blog.select &#123; <span class="params">|key, value|</span> [<span class="symbol">:name</span>, <span class="symbol">:description</span>].<span class="keyword">include</span>?(key) &#125;</span><br><span class="line">  =&gt; &#123;<span class="symbol">:name=&gt;<span class="string">"Ruby 2.5"</span></span>, <span class="symbol">:description=&gt;<span class="string">"BigBinary Blog"</span></span>&#125;</span><br></pre></td></tr></table></figure><p><a href="https://bugs.ruby-lang.org/users/5184" target="_blank" rel="noopener">Matzbara Masanao</a> proposed a simple method to take care of this.</p><p>Some of the names proposed were choice and pick.</p><p><a href="https://twitter.com/yukihiro_matz" target="_blank" rel="noopener">Matz</a> suggested the name slice since this method is ActiveSupport compatible.</p><p>Ruby 2.5.0</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">irb&gt; blog = &#123; <span class="symbol">id:</span> <span class="number">1</span>, <span class="symbol">name:</span> <span class="string">'Ruby 2.5'</span>, <span class="symbol">description:</span> <span class="string">'BigBinary Blog'</span> &#125;</span><br><span class="line">  =&gt; &#123;<span class="symbol">:id=&gt;</span><span class="number">1</span>, <span class="symbol">:name=&gt;<span class="string">"Ruby 2.5"</span></span>, <span class="symbol">:description=&gt;<span class="string">"BigBinary Blog"</span></span>&#125;</span><br><span class="line"></span><br><span class="line">irb&gt; blog.slice(<span class="symbol">:name</span>, <span class="symbol">:description</span>)</span><br><span class="line">  =&gt; &#123;<span class="symbol">:name=&gt;<span class="string">"Ruby 2.5"</span></span>, <span class="symbol">:description=&gt;<span class="string">"BigBinary Blog"</span></span>&#125;</span><br><span class="line">As we can see, now we can use a simple method slice to select key value pairs from a hash with specified keys.</span><br></pre></td></tr></table></figure><p>Here is relevant <a href="https://github.com/ruby/ruby/commit/6c50bdda0b" target="_blank" rel="noopener">commit</a> and <a href="https://bugs.ruby-lang.org/issues/13563" target="_blank" rel="noopener">discussion</a>.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Lonely Operator传说中的单身狗运算符</title>
      <link href="/2019/01/21/Lonely-Operator%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%8D%95%E8%BA%AB%E7%8B%97%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2019/01/21/Lonely-Operator%E4%BC%A0%E8%AF%B4%E4%B8%AD%E7%9A%84%E5%8D%95%E8%BA%AB%E7%8B%97%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="单身狗运算符"><a href="#单身狗运算符" class="headerlink" title="单身狗运算符"></a>单身狗运算符</h3><p>As of Ruby 2.3.0 there is a new operator known as the Safe Navigation Operator, or the Lonely Operator.  According to Matz it “looks like someone sitting on the floor, looking at the dot.”  What this operator allows you to do is continue chaining methods even if one of the items along the way returns nil.  It will safely return nil if that is the case.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@a&amp;.size</span><br><span class="line"><span class="comment"># =&gt; nil</span></span><br><span class="line"> </span><br><span class="line">@a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"> </span><br><span class="line">@a&amp;.size</span><br><span class="line"><span class="comment"># =&gt; 3</span></span><br></pre></td></tr></table></figure><p>Notice we didn’t get a NoMethodError.  This will save a lot of the uses of the Rails try method.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>how to accessed top level scope</title>
      <link href="/2019/01/21/how-to-accessed-top-level-scope/"/>
      <url>/2019/01/21/how-to-accessed-top-level-scope/</url>
      
        <content type="html"><![CDATA[<h3 id="Top-level-scope-objects-can-be-accessed-with-“-”"><a href="#Top-level-scope-objects-can-be-accessed-with-“-”" class="headerlink" title="Top level scope objects can be accessed with “::”"></a>Top level scope objects can be accessed with “::”</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">A</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">test</span></span></span><br><span class="line">    <span class="string">"FOO"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Thing</span></span></span><br><span class="line">  <span class="class"><span class="keyword">module</span> <span class="title">A</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">test</span></span></span><br><span class="line">      <span class="string">"BAR"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">Thing</span>.<span class="title">inner</span></span></span><br><span class="line">    A.test</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">Thing</span>.<span class="title">outer</span></span></span><br><span class="line">    <span class="symbol">:</span><span class="symbol">:A</span>.test</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">Thing.outer</span><br><span class="line"><span class="comment"># =&gt; "FOO"</span></span><br><span class="line">Thing.inner</span><br><span class="line"><span class="comment"># =&gt; "BAR"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Rails Set Access Origin</title>
      <link href="/2019/01/15/Rails-Set-Access-Origin/"/>
      <url>/2019/01/15/Rails-Set-Access-Origin/</url>
      
        <content type="html"><![CDATA[<h3 id="Rails-Api跨域设置Allow-Origin"><a href="#Rails-Api跨域设置Allow-Origin" class="headerlink" title="Rails Api跨域设置Allow Origin"></a>Rails Api跨域设置Allow Origin</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gem <span class="string">'rack-cors'</span>, <span class="symbol">:require</span> =&gt; <span class="string">'rack/cors'</span></span><br><span class="line"></span><br><span class="line">config.middleware.insert_before <span class="number">0</span>, Rack::Cors <span class="keyword">do</span></span><br><span class="line">  allow <span class="keyword">do</span></span><br><span class="line">    origins <span class="string">'*'</span></span><br><span class="line">    resource <span class="string">'*'</span>, <span class="symbol">:headers</span> =&gt; <span class="symbol">:any</span>, <span class="symbol">:methods</span> =&gt; [<span class="symbol">:get</span>, <span class="symbol">:post</span>, <span class="symbol">:options</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails + Neo4j + GraphQL【转载】</title>
      <link href="/2018/05/20/Rails-Neo4j-GraphQL/"/>
      <url>/2018/05/20/Rails-Neo4j-GraphQL/</url>
      
        <content type="html"><![CDATA[<h3 id="想要做什么"><a href="#想要做什么" class="headerlink" title="想要做什么"></a>想要做什么</h3><p>使用GraphQL为存储在图形类型数据库提供API。</p><h3 id="什么是Neo4j"><a href="#什么是Neo4j" class="headerlink" title="什么是Neo4j"></a>什么是Neo4j</h3><p>Neo4j是NoSQL图形类型数据库的一种类型。<br>顾名思义, 图类型数据库就是一个可以处理图结构中的数据的数据库。<br><img src="/img/neo4j-graphql/neo4j-example.png" alt=""><br>在这个例子中, 绿色节点是Person, 红色节点是Movie。<br>写在箭头中的ACTED_IN和DIRECTED是节点之间的关系。</p><h3 id="什么是GraphQL"><a href="#什么是GraphQL" class="headerlink" title="什么是GraphQL"></a>什么是GraphQL</h3><p>GraphQL是一种API，它可以通过类似于JSON的格式的查询集中收集嵌套数据。<br>查询和响应的例子就是这样。</p><pre><code>curl  - XPOST  -  d&apos;  query = {users（name：&quot;taro&quot;）{name followers（）{name}}}&apos; localhost：3101/graphql</code></pre><p>返回数据</p><pre><code>{  &quot;data&quot;: {    &quot;users&quot;: {      &quot;name&quot;: &quot;张三&quot;,      &quot;followers&quot;: [        {&quot;name&quot;: &quot;李四&quot;},        {&quot;name&quot;: &quot;王五&quot;}      ]    }  }}</code></pre><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p>我将编写这个程序，从这里实际使用Rails中的Neo 4 j和GraphQL。<br>测试数据使用<br>使用faker生成随机数据（原文使用Twitter的follow数据 ）</p><h3 id="安装Neo4j"><a href="#安装Neo4j" class="headerlink" title="安装Neo4j"></a>安装Neo4j</h3><p>在Mac系统中, Neo4j很容易进行安装。<br>注）主要先安装Java环境 并设置$JAVA_HOME</p><pre><code>＃安装 neo4j brew install neo4j＃启动 Neo4j neo4j start</code></pre><p>启动后，在浏览器中打开<a href="http://localhost:7474" target="_blank" rel="noopener">http://localhost:7474</a> 将打开Web界面。<br>里面有很多材料，介绍了如何使用Neo4j。<br>例如下图中的示例图将是一个很好的练习。<br><img src="/img/neo4j-graphql/neo4j-example-graphs.png" width="400"> </p><h3 id="创建项目-并使用seed生成数据"><a href="#创建项目-并使用seed生成数据" class="headerlink" title="创建项目 并使用seed生成数据"></a>创建项目 并使用seed生成数据</h3><pre><code># 新建项目rails new graphql-neo4j-demo</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开Gemfile文件 添加相关gem</span></span><br><span class="line">gem <span class="string">'neo4j'</span> <span class="comment"># ruby neo4j数据库</span></span><br><span class="line">gem <span class="string">'graphql'</span> <span class="comment"># graphql api</span></span><br><span class="line">gem <span class="string">'graphql-batch'</span> </span><br><span class="line">gem <span class="string">'neo4j-rake_tasks'</span>, <span class="string">'~&gt; 0.7.18'</span> <span class="comment"># neo4j 的rake集成</span></span><br><span class="line"><span class="comment"># gem 'faker', '~&gt; 1.8', '&gt;= 1.8.7' # 生成假数据</span></span><br><span class="line">gem <span class="string">'ffaker'</span>, <span class="string">'~&gt; 2.9'</span> <span class="comment">#生成中文名</span></span><br><span class="line">group <span class="symbol">:development</span> <span class="keyword">do</span></span><br><span class="line">  gem <span class="string">'graphiql-rails'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>使用<code>bundle install</code>和<code>rails generate graphql:install</code>安装相关gem和graphql模块。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/neo4j.yml</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">development:</span></span><br><span class="line">  <span class="symbol">type:</span> http</span><br><span class="line">  <span class="symbol">url:</span> <span class="symbol">http:</span>/<span class="regexp">/[username]:[password]@localhost:7474</span></span><br><span class="line"><span class="regexp">test:</span></span><br><span class="line"><span class="regexp">  type: http</span></span><br><span class="line"><span class="regexp">  url: http:/</span><span class="regexp">/[username]:[password]@localhost:7474</span></span><br></pre></td></tr></table></figure><pre><code>bundle exec rails g neo4j:model user user_id:integer screen_name:string name:stringbundle exec rails g neo4j:model followbundle exec rails neo4j:migrate</code></pre><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/models/user.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line">  <span class="keyword">include</span> Neo4j::ActiveNode</span><br><span class="line">  property <span class="symbol">:user_id</span>, <span class="symbol">type:</span> Integer</span><br><span class="line">  property <span class="symbol">:screen_name</span>, <span class="symbol">type:</span> String</span><br><span class="line">  property <span class="symbol">:name</span>, <span class="symbol">type:</span> String</span><br><span class="line">  has_many <span class="symbol">:in</span>, <span class="symbol">:followers</span>, <span class="symbol">model_class:</span> <span class="symbol">:User</span>, <span class="symbol">rel_class:</span> <span class="symbol">:Follow</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/models/follow.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Follow</span> </span></span><br><span class="line">  <span class="keyword">include</span> Neo4j::ActiveRel</span><br><span class="line">  from_class <span class="symbol">:User</span></span><br><span class="line">  to_class <span class="symbol">:User</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># db/seeds.rb</span></span><br><span class="line">nodes = []</span><br><span class="line"></span><br><span class="line"><span class="number">20</span>.times <span class="keyword">do</span></span><br><span class="line">  user_id = SecureRandom.uuid</span><br><span class="line">  node = User.create(</span><br><span class="line">    <span class="symbol">user_id:</span> user_id,</span><br><span class="line">    <span class="symbol">name:</span> FFaker::NameCN.name,</span><br><span class="line">    <span class="symbol">screen_name:</span> FFaker::Name.last_name</span><br><span class="line">  )</span><br><span class="line">  nodes &lt;&lt; node</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">follower_ids = []</span><br><span class="line"></span><br><span class="line"><span class="number">30</span>.times <span class="keyword">do</span></span><br><span class="line">  follower_group = nodes.sample(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">unless</span> follower_ids.<span class="keyword">include</span>?(follower_group.map(&amp;<span class="symbol">:user_id</span>))</span><br><span class="line">    Follow.create(<span class="symbol">from_node:</span> follower_group[<span class="number">0</span>], <span class="symbol">to_node:</span> follower_group[<span class="number">1</span>])</span><br><span class="line">    puts <span class="string">"<span class="subst">#&#123;follower_group[<span class="number">0</span>][<span class="symbol">:screen_name</span>]&#125;</span> -&gt; <span class="subst">#&#123;follower_group[<span class="number">1</span>][<span class="symbol">:screen_name</span>]&#125;</span>"</span></span><br><span class="line">    follower_ids &lt;&lt; follower_group.map(&amp;<span class="symbol">:user_id</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>使用<code>bundle exec rails db:seed</code>,创建测试种子数据并添加到Neo4j。<br>浏览器打开<code>http://localhost：7474</code>, 请点击下图中的User。<br><img src="/img/neo4j-graphql/node-labels.png" width="400"><br>可以看见他们相互之间的关系如下图所示:<br><img src="/img/neo4j-graphql/user-follow-neo4j.png" alt=""></p><h3 id="GraphQL-API"><a href="#GraphQL-API" class="headerlink" title="GraphQL API"></a>GraphQL API</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/graphql/&#123;PROJECT_NAME&#125;_schema.rb</span></span><br><span class="line"></span><br><span class="line">&#123;PROJECT_NAME&#125;Schema = GraphQL::Schema.define <span class="keyword">do</span></span><br><span class="line">  mutation(Types::MutationType)</span><br><span class="line">  query(Types::QueryType)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/graphql/types/query_type.rb</span></span><br><span class="line"></span><br><span class="line">Types::QueryType = GraphQL::ObjectType.define <span class="keyword">do</span></span><br><span class="line">  name <span class="string">"Query"</span></span><br><span class="line">  field <span class="symbol">:users</span>, types.String <span class="keyword">do</span></span><br><span class="line">    type Types::UserType</span><br><span class="line">    description <span class="string">'Twitter user'</span></span><br><span class="line">    argument <span class="symbol">:name</span>, types.String</span><br><span class="line">    resolve -&gt;(obj, args, ctx) &#123;</span><br><span class="line">      User.find_by(<span class="symbol">name:</span> args[<span class="string">'name'</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/graphql/types/user_type.rb</span></span><br><span class="line"></span><br><span class="line">Types::UserType = GraphQL::ObjectType.define <span class="keyword">do</span></span><br><span class="line">  name <span class="string">"User"</span></span><br><span class="line">  description <span class="string">"A Faker User"</span></span><br><span class="line">  field <span class="symbol">:user_id</span>, types.String</span><br><span class="line">  field <span class="symbol">:screen_name</span>, types.String</span><br><span class="line">  field <span class="symbol">:name</span>, types.String</span><br><span class="line">  field <span class="symbol">:uuid</span>, types.String</span><br><span class="line"></span><br><span class="line">  field <span class="symbol">:followers</span>, types[Types::UserType] <span class="keyword">do</span></span><br><span class="line">    argument <span class="symbol">:limit</span>, types.Int, <span class="symbol">default_value:</span> <span class="number">10</span></span><br><span class="line">    resolve -&gt;(user, args, ctx) &#123;</span><br><span class="line">      user.followers.limit(args[<span class="symbol">:size</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>启动项目 <code>rails s</code>, 打开浏览器输入<code>http://127.0.0.1:3000/graphiql</code><br>在左侧输入如下查询可以查找到follow过’梦盈祭’的用户。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">  users(name: &quot;梦盈祭&quot;)&#123;</span><br><span class="line">    name</span><br><span class="line">    screen_name</span><br><span class="line">    user_id</span><br><span class="line">    uuid</span><br><span class="line">    followers()&#123;</span><br><span class="line">      name</span><br><span class="line">      screen_name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查询结果如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"users"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"梦盈祭"</span>,</span><br><span class="line">      <span class="attr">"screen_name"</span>: <span class="string">"Kuphal"</span>,</span><br><span class="line">      <span class="attr">"user_id"</span>: <span class="string">"c758d246-ac87-468f-b252-5cc90d396480"</span>,</span><br><span class="line">      <span class="attr">"uuid"</span>: <span class="string">"58fd1b6e-d4d0-414c-b1d6-f5478336431f"</span>,</span><br><span class="line">      <span class="attr">"followers"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"秀德茹"</span>,</span><br><span class="line">          <span class="attr">"screen_name"</span>: <span class="string">"Dietrich"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"纯瑄雍"</span>,</span><br><span class="line">          <span class="attr">"screen_name"</span>: <span class="string">"Boyer"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"刚妹蒉"</span>,</span><br><span class="line">          <span class="attr">"screen_name"</span>: <span class="string">"Krajcik"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://qiita.com/enkatsu/items/94ad000b76fd9cb89fb4" target="_blank" rel="noopener">https://qiita.com/enkatsu/items/94ad000b76fd9cb89fb4</a></p><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://github.com/Huimeng/neo4j-graphql-demo" target="_blank" rel="noopener">https://github.com/Huimeng/neo4j-graphql-demo</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rails 数据变化的监控</title>
      <link href="/2018/03/27/rails-%E6%95%B0%E6%8D%AE%E5%8F%98%E5%8C%96%E7%9A%84%E7%9B%91%E6%8E%A7/"/>
      <url>/2018/03/27/rails-%E6%95%B0%E6%8D%AE%E5%8F%98%E5%8C%96%E7%9A%84%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="Dirty-objects"><a href="#Dirty-objects" class="headerlink" title="Dirty objects"></a>Dirty objects</h3><p>Dirty Objects功能可以追踪Model的属性是否有改变：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">person = Person.find_by_name(<span class="string">'Uncle Bob'</span>)</span><br><span class="line">person.changed? <span class="comment"># =&gt; false 没有改变任何值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让我们来改一些值</span></span><br><span class="line">person.name = <span class="string">'Bob'</span></span><br><span class="line">person.changed? <span class="comment"># =&gt; true 有改变</span></span><br><span class="line">person.name_changed? <span class="comment"># =&gt; true 这个属性有改变</span></span><br><span class="line">person.name_was <span class="comment"># =&gt; 'Uncle Bob' 改变之前的值</span></span><br><span class="line">person.name_change <span class="comment"># =&gt; ['Uncle Bob', 'Bob']</span></span><br><span class="line">person.name = <span class="string">'Bill'</span></span><br><span class="line">person.name_change <span class="comment"># =&gt; ['Uncle Bob', 'Bill']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 储存进资料库</span></span><br><span class="line">person.save</span><br><span class="line">person.changed? <span class="comment"># =&gt; false</span></span><br><span class="line">person.name_changed? <span class="comment"># =&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 看看哪些属性改变了</span></span><br><span class="line">person.name = <span class="string">'Bob'</span></span><br><span class="line">person.changed <span class="comment"># =&gt; ['name']</span></span><br><span class="line">person.changes <span class="comment"># =&gt; &#123; 'name' =&gt; ['Bill', 'Bob'] &#125;</span></span><br></pre></td></tr></table></figure><pre><code>注意到Model资料一旦储存进资料库，追踪记录就重算消失了。</code></pre><p>什么时候会用到这个功能呢?通常是在储存进资料库前的回呼、验证或Observer中，你想根据修改了什么来做些动作，这时候Dirty</p><p> Objects功能就派上用场了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails 中乐观锁与悲观锁的使用</title>
      <link href="/2018/03/19/Rails-%E4%B8%AD%E4%B9%90%E8%A7%82%E9%94%81%E4%B8%8E%E6%82%B2%E8%A7%82%E9%94%81%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/03/19/Rails-%E4%B8%AD%E4%B9%90%E8%A7%82%E9%94%81%E4%B8%8E%E6%82%B2%E8%A7%82%E9%94%81%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>简介</p><p>本文主要讲我们日常开发中用到的两种锁：</p><p>悲观锁：悲观锁采用相对保守的策略，在资源争用比较严重的时候比较合适。悲观锁在事务开始之前就去尝试获得写权限，事务结束后释放锁；也就是说对于同一行记录，只有一个写事务可以并行；<br>乐观锁：乐观锁是在提交事务之前，大家可以各自修改数据，但是在提交事务的时候，如果发现在这个过程中，数据发生了改变，那么直接拒绝此次事务提交。乐观锁适合在资源争用不激烈的时候使用。</p><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>常用场景<br>一般对于资源的争用都可以使用悲观锁，比如电商系统中涉及到订单的部分，比如用户支付完成后可能会同时有多条支付成功的通知（做过支付的都知道一般有同步通知和异步通知），比如订单改价的同时可能用户正在支付等等，对于这种会对订单状态发生改变的操作，我们内部一般对这种操作都做加锁处理。</p><p>使用<br>rails 的 API 文档中有详细的说明：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># select * from accounts where id=1 for update</span></span><br><span class="line">Account.lock.find(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 注意，这种最终会导致一个行锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># select * from accounts where name = 'shugo' limit 1 for update</span></span><br><span class="line">Account.where(<span class="string">"name = 'shugo'"</span>).lock(<span class="literal">true</span>).first</span><br><span class="line"><span class="comment"># 注意，这里可不是行锁，这里会是一个表锁</span></span><br><span class="line"><span class="comment"># 注意上面的区别，mysql innodb 里面，对于 "select * from where xxx for update" 的情况，是会锁住整张表的，所以最好不要这样来用。Rails 也提供了一个很方便的方法 with_lock 来锁住单个记录，并且内嵌在事务之中。下面代码中的两段是等价的：</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">account = Account.find(<span class="number">1</span>)</span><br><span class="line">Account.transaction <span class="keyword">do</span></span><br><span class="line">    account.lock!</span><br><span class="line">    account.balance -= <span class="number">100</span></span><br><span class="line">    account.save! </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 和下面是等价的</span></span><br><span class="line"></span><br><span class="line">account.with_lock <span class="keyword">do</span></span><br><span class="line">    account.balance -= <span class="number">100</span></span><br><span class="line">    account.save!</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>常用场景<br>悲观锁出错概率小，因为一旦获得锁，其他进程会堵塞，但是也导致速度会受影响，系统开销比较大，不利于并发。乐观锁适用于资源竞争不是那么多的地方，这样系统的开销较小，速度也比较快。</p><p>乐观锁本质上算是一个利用多版本管理来控制并发的技术，如果事务提交之后，数据库发现写入进程传入的版本号与目前数据库中的版本号不一致，说明有其他人已经修改过数据，不再允许本事务的提交。所以，使用乐观锁之前需要给数据库增加一列 :lock_version，Rails会自动识别这一列，像数据库提交数据的时候自动带上。另外，乐观锁是默认打开的，如果要关闭，需要配置一下。</p><p>使用<br>记得使用前添加 lock_version 的字段给相应的表，其他的就是自动的了，如果事务提交失败，那么 Rails 会抛一个 ActiveRecord::StaleObjectError 的异常。</p><p>比如，下面这段代码会进行重试：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">retry_times = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    @order.with_lock <span class="keyword">do</span></span><br><span class="line">        @order.set_paid!</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">rescue</span> ActiveRecord::StaleObjectError =&gt; e</span><br><span class="line">    retry_times -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> retry_times &gt; <span class="number">0</span></span><br><span class="line">        <span class="keyword">retry</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        raise e</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">rescue</span> =&gt; e</span><br><span class="line">    raise e</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>需要注意的地方<br>一般，使用锁的时候和事务同时使用，所以 with_lock 是用的比较多的，而且尽量使用行锁而不是表锁。<br>另外，也注意异常的处理，需要使用那些会抛异常的方法；<br>对于乐观锁，还需要注意如果是前端操作频繁，那么还需要把 lock_version 写入到 form 表单中，否则起不到锁的作用，这里讲的很详细了</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://railscasts.com/episodes/59-optimistic-locking-revised" target="_blank" rel="noopener">http://railscasts.com/episodes/59-optimistic-locking-revised</a><br><a href="https://blog.engineyard.com/2011/a-guide-to-optimistic-locking" target="_blank" rel="noopener">https://blog.engineyard.com/2011/a-guide-to-optimistic-locking</a><br><a href="http://api.rubyonrails.org/classes/ActiveRecord/Locking/Optimistic.html" target="_blank" rel="noopener">http://api.rubyonrails.org/classes/ActiveRecord/Locking/Optimistic.html</a></p><h3 id="原帖"><a href="#原帖" class="headerlink" title="原帖"></a>原帖</h3><p><a href="https://ruby-china.org/topics/28963" target="_blank" rel="noopener">https://ruby-china.org/topics/28963</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> rails </tag>
            
            <tag> 乐观锁 </tag>
            
            <tag> 悲观锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rails的锁机制</title>
      <link href="/2018/03/19/rails%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/03/19/rails%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>rails中的lock语句用的锁是我们常说的悲观锁，sql的语句一般是: select … from … where …for update<br>一般情况下，事务要和锁一起用，本文提到的订单超卖的问题就是未使用锁导致的，代码如下：</p><pre><code class="ruby">sku = User.find_by_id(sku_id)  ActiveRecord::Base.transaction <span class="keyword">do</span>    <span class="keyword">if</span>(sku.stock &gt; <span class="number">0</span>)      sku.update_attributes!(<span class="symbol">stock:</span> sku.stock - <span class="number">1</span>)      Order.create!(order_attrs)    <span class="keyword">end</span>              <span class="keyword">end</span></code></pre><p>在高并发的情况下，会出现这个问题，多个并发都同时执行到并满足第三行代码的条件，if条件下的语句都会执行，就会出现超卖的问题，那么怎么做不会超卖呢？就是加锁。</p><pre><code class="ruby">sku = User.find_by_id(sku_id)  ActiveRecord::Base.transaction <span class="keyword">do</span>    sku.lock!    <span class="keyword">if</span>(sku.stock &gt; <span class="number">0</span>)      sku.update_attributes!(<span class="symbol">stock:</span> sku.stock - <span class="number">1</span>)      Order.create!(order_attrs)    <span class="keyword">end</span>              <span class="keyword">end</span></code></pre><p>这样就不会出现超卖的情况了，估计有人有疑问，这样不会仍然有超卖的情况吗，多个并发同时执行并满足第四行代码时，if条件下的语句也都会执行，NONO，不是这样的，lock语句会执行: select * from … where … for update，查出的数据是最新的数据，所以不会出现这个问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> rails </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails的事务和锁part2</title>
      <link href="/2018/03/18/Rails%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%92%8C%E9%94%81part2/"/>
      <url>/2018/03/18/Rails%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%92%8C%E9%94%81part2/</url>
      
        <content type="html"><![CDATA[<h3 id="触发事务回滚"><a href="#触发事务回滚" class="headerlink" title="触发事务回滚"></a>触发事务回滚</h3><p>事务通过 rollback 过程把记录的状态进行重置。在 Rails 中，rollback 只会被一个 exception 触发。这是非常关键的一点，很多事务块中的代码不会触发异常，因此即使出错，事务也不会回滚。比如下面的写法：</p><pre><code class="ruby">ActiveRecord::Base.transaction <span class="keyword">do</span>    david.update_attribute(<span class="symbol">:amount</span>, david.amount -<span class="number">100</span>)    mary.update_attribute(<span class="symbol">:amount</span>, <span class="number">100</span>)  <span class="keyword">end</span></code></pre><p>因为 Rails 中，#update_attribute 方法在调用失败的时候也不会触发 exception，它只是简单的返回 false ，因此必须确保 transaction 块中的函数在失败时会抛异常。正确的写法是这样的：</p><pre><code class="ruby">ActiveRecord::Base.transaction <span class="keyword">do</span>    david.update_attributes!(<span class="symbol">:amount</span> =&gt; -<span class="number">100</span>)    mary.update_attributes!(<span class="symbol">:amount</span> =&gt; <span class="number">100</span>)  <span class="keyword">end</span></code></pre><p>这里值得一提的是，Rails 中约定，带有叹号的函数一般会在失败时抛异常，所以我们自己写带有!号的方法也一定要在失败时raise一个异常，这样才符合rails的规范。<br>同时，我也看到一些代码中，在事务块中使用了 #find_by 方法，实际上，find_by 等魔术方法当找不到记录的时候会返回 nil，而 #find 方法在找不到记录的时候会抛出一个ActiveRecord::RecordNotFound 异常。比如下面的例子：</p><pre><code class="ruby">ActiveRecord::Base.transaction <span class="keyword">do</span>    david = User.find_by_name(<span class="string">"david"</span>)    <span class="keyword">if</span>(david.id != john.id)      john.update_attributes!(<span class="symbol">:amount</span> =&gt; -<span class="number">100</span>)      mary.update_attributes!(<span class="symbol">:amount</span> =&gt; <span class="number">100</span>)    <span class="keyword">end</span>  <span class="keyword">end</span></code></pre><p>发现上面的逻辑错误了吗？nil 对象也有一个 id 方法，导致记录没有被找到的错误被隐藏了。同时，由于 find_by 也不会抛出异常，因此下面的代码被错误的执行了。这就意味着，有的时候在某些场景下，我们需要人工抛异常。因此这段代码因此改成下面的形式:<br>当错误出现时，事务本身会回滚，同时异常也会在外层抛出。因此，你的调用方必须考虑 catch 这个异常，并进行相应的处理。</p><pre><code class="ruby">ActiveRecord::Base.transaction <span class="keyword">do</span>    david = User.find_by_name(<span class="string">"david"</span>)    raise ActiveRecord::RecordNotFound <span class="keyword">if</span> david.<span class="literal">nil</span>?    <span class="keyword">if</span>(david.id != john.id)      john.update_attributes!(<span class="symbol">:amount</span> =&gt; -<span class="number">100</span>)      mary.update_attributes!(<span class="symbol">:amount</span> =&gt; <span class="number">100</span>)    <span class="keyword">end</span>  <span class="keyword">end</span></code></pre><p>有一个特殊的异常，ActiveRecord::Rollback，当它被抛出时，事务本身会回滚，但是它并不会被重新抛出，因此你也不需要在外部进行 catch 和处理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> 事务，锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails的事务和锁part1</title>
      <link href="/2018/03/17/Rails%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%92%8C%E9%94%81part1/"/>
      <url>/2018/03/17/Rails%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%92%8C%E9%94%81part1/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么要使用事务"><a href="#为什么要使用事务" class="headerlink" title="为什么要使用事务"></a>为什么要使用事务</h3><p>事务是指并发控制的单位，是用户定义的一个操作序列。简单的来说事务里面的多个操作，要么都不执行，要么一起执行。事务可以帮助开发者保证应用中的数据一致性。常见的使用事务的场景是银行转账，钱从一个账户转移到另外一个账户。如果中间的某一步出错，那么整个过程应该重置（Rollback）。<br>举个银行的例子(伪代码)：</p><p>举个银行的例子(伪代码)：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ActiveRecord::Base.transaction <span class="keyword">do</span>  </span><br><span class="line">  david.withdrawal(<span class="number">100</span>)  </span><br><span class="line">  mary.deposit(<span class="number">100</span>)  </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>Rails中，通过ActiveRecord对象的类方法或者实例方法即可实现事务：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Client.transaction <span class="keyword">do</span>  </span><br><span class="line">  @client.users.create!  </span><br><span class="line">  @user.clients(<span class="literal">true</span>).first.destroy!  </span><br><span class="line">  Product.first.destroy!  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">  </span><br><span class="line">@client.transaction <span class="keyword">do</span>  </span><br><span class="line">  @client.users.create!  </span><br><span class="line">  @user.clients(<span class="literal">true</span>).first.destroy!  </span><br><span class="line">  Product.first.destroy!  </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>可以看到上面的例子中，每个事务中均含有多个不同的 model 。在同一个事务中调用多个 model 对象是常见的行为，因为事务是和一个数据库连接绑定在一起的，而不是某个 model 对象；而同时，也只有在对多个纪录进行操作，并且希望这些操作作为一个整体的时候，事务才是必要的。<br>另外，Rails 已经把类似 #save 和 #destroy 的方法包含在一个事务中了，因此，对于单条数据库记录来说，不需要再使用显式的调用了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> rails </tag>
            
            <tag> 事务，锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么需要前后分离</title>
      <link href="/2018/03/12/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB/"/>
      <url>/2018/03/12/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<p>前后端要不要分，怎么分，是由具体业务决定的。</p><p>需要用户登录且不能由搜索引擎抓取，前后端分离是鼓励的。</p><p>需要搜索引擎带流量的，必须由服务器端渲染。</p><p>需要App和后端交互，必须分离。</p><p>但是分了就表示架构合理？不一定。</p><p>设计一套合理／可升级／客户端友好的API也不容易。</p><p>要想分离好，前端开发要了解后端架构，后端开发要虚心学习JavaScript，双方如果互相鄙视，分了也白搭。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String incrementer </title>
      <link href="/2018/02/27/String-incrementer/"/>
      <url>/2018/02/27/String-incrementer/</url>
      
        <content type="html"><![CDATA[<p>Your job is to write a function which increments a string, to create a new string. If the string already ends with a number, the number should be incremented by 1. If the string does not end with a number the number 1 should be appended to the new string.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples:"></a>Examples:</h3><pre><code>foo -&gt; foo1foobar23 -&gt; foobar24foo0042 -&gt; foo0043foo9 -&gt; foo10foo099 -&gt; foo100</code></pre><p>Attention: If the number has leading zeros the amount of digits should be considered.</p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment_string</span><span class="params">(input)</span></span></span><br><span class="line">  <span class="comment">#your code here</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">"1"</span> <span class="keyword">if</span> input.empty?</span><br><span class="line">  arr = input.rpartition(<span class="regexp">/\D/</span>)</span><br><span class="line">  <span class="keyword">if</span> arr[-<span class="number">1</span>].empty?</span><br><span class="line">   arr[-<span class="number">1</span>] = <span class="string">"1"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    arr[-<span class="number">1</span>] = arr[-<span class="number">1</span>].succ</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> arr.join</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment_string</span><span class="params">(input)</span></span></span><br><span class="line">  input.sub(<span class="regexp">/\d*$/</span>) &#123; <span class="params">|n|</span> n.empty? ? <span class="number">1</span> : n.succ &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> codewars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ruby中super和super()的区别</title>
      <link href="/2018/02/26/ruby%E4%B8%ADsuper%E5%92%8Csuper-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/02/26/ruby%E4%B8%ADsuper%E5%92%8Csuper-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>我们经常要在子类的initialize方法中调用super和super()。<br>从语法上说super和super()是有微妙区别的。<br>&nbsp;&nbsp;&nbsp;&nbsp;super不带括号表示调用父类的同名函数，并将本函数的所有参数传入父类的同名函数；<br>&nbsp;&nbsp;&nbsp;&nbsp;super()带括号则表示调用父类的同名函数，但是不传入任何参数；</p><p>演示代码如下：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SParent</span>  </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span> <span class="title">*</span><span class="title">args</span>  </span></span><br><span class="line">        args.each &#123;<span class="params">|arg|</span> puts arg&#125;  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SChild</span> &lt; SParent  </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span> <span class="title">a</span>, <span class="title">b</span>, <span class="title">c</span>  </span></span><br><span class="line">        <span class="keyword">super</span>  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">   </span><br><span class="line">a, b, c = *<span class="string">%W[a b c]</span>  </span><br><span class="line">SChild.new a, b, c <span class="comment"># puts a, b, c if super  </span></span><br><span class="line">SChild.new a, b, c <span class="comment"># puts nothing if super()</span></span><br></pre></td></tr></table></figure></p><p>可以看出当SChild的initialize中调用super()时，代码是不会打印任何信息的。这是因为super()没有向SParent的initialize方法传任何参数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> codewars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby中include &amp; extend的区别</title>
      <link href="/2018/02/26/Ruby%E4%B8%ADinclude-extend%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/02/26/Ruby%E4%B8%ADinclude-extend%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="require"><a href="#require" class="headerlink" title="require"></a>require</h3><pre><code>require方法是加载一个文件，只加载一次，如果多次加载会返回false，一般在使用require加载一个文件的时候不需要加扩展名。如要加载test.rb文件时，require ‘test’。</code></pre><h3 id="load"><a href="#load" class="headerlink" title="load"></a>load</h3><pre><code>load方法跟require方法类似，也是加载一个文件，但是也有不同，就是它可以多次加载，而且必须制定扩展名。如要加载文件test.rb文件时， load &quot;test.rb&quot;</code></pre><h3 id="include-amp-extend"><a href="#include-amp-extend" class="headerlink" title="include &amp; extend"></a>include &amp; extend</h3><p>先说include 和 extend，看下面的一段代码：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">A</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">my_method</span></span></span><br><span class="line">    puts <span class="string">"method in A"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line">  <span class="keyword">include</span> A</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line">  extend A</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>这样写之后，B将新增一个实例方法my_method，C将新增一个类方法my_method，同时，B的祖先链（ancestors）中将增加A，而C的祖先链中没有A。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> codewars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sum of Digits / Digital Root</title>
      <link href="/2018/02/22/Sum-of-Digits-Digital-Root/"/>
      <url>/2018/02/22/Sum-of-Digits-Digital-Root/</url>
      
        <content type="html"><![CDATA[<p>In this kata, you must create a digital root function.</p><p>A digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has two digits, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.</p><p>Here’s how it works (Ruby example given):</p><pre><code>digital_root(16)  =&gt; 1 + 6  =&gt; 7digital_root(942)  =&gt; 9 + 4 + 2  =&gt; 15 ...  =&gt; 1 + 5  =&gt; 6digital_root(132189)  =&gt; 1 + 3 + 2 + 1 + 8 + 9  =&gt; 24 ...  =&gt; 2 + 4  =&gt; 6digital_root(493193)  =&gt; 4 + 9 + 3 + 1 + 9 + 3  =&gt; 29 ...  =&gt; 2 + 9  =&gt; 11 ...  =&gt; 1 + 1  =&gt; 2</code></pre><h3 id="Answers"><a href="#Answers" class="headerlink" title="Answers:"></a>Answers:</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">digital_root</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  n = n.to_s.chars.map(&amp;<span class="symbol">:to_i</span>).reduce(<span class="symbol">:+</span>)</span><br><span class="line">  n &gt; <span class="number">9</span> ? digital_root(n) : n</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">digital_root</span><span class="params">(n)</span></span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">  n &lt; <span class="number">10</span> ? n : digital_root(n / <span class="number">10</span> + n % <span class="number">10</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> codewars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RGB To Hex Conversion</title>
      <link href="/2018/02/22/RGB-To-Hex-Conversion/"/>
      <url>/2018/02/22/RGB-To-Hex-Conversion/</url>
      
        <content type="html"><![CDATA[<p>The rgb() method is incomplete. Complete the method so that passing in RGB decimal values will result in a hexadecimal representation being returned. The valid decimal values for RGB are 0 - 255. Any (r,g,b) argument values that fall out of that range should be rounded to the closest valid value.</p><p>The following are examples of expected output values:</p><pre><code>rgb(255, 255, 255) # returns FFFFFFrgb(255, 255, 300) # returns FFFFFFrgb(0,0,0) # returns 000000rgb(148, 0, 211) # returns 9400D3</code></pre><h3 id="Answers"><a href="#Answers" class="headerlink" title="Answers:"></a>Answers:</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rgb</span><span class="params">(r, g, b)</span></span></span><br><span class="line">  <span class="comment"># complete this function</span></span><br><span class="line">  rgb_list = [r,g,b].map &#123;<span class="params">|item|</span> </span><br><span class="line">    <span class="keyword">if</span> item &lt; <span class="number">0</span></span><br><span class="line">      <span class="number">0</span></span><br><span class="line">    <span class="keyword">elsif</span> item &gt;<span class="number">255</span></span><br><span class="line">      <span class="number">255</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      item</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  &#125;</span><br><span class="line">  rgb_list.inject(<span class="string">""</span>) &#123;<span class="params">|str,item|</span> str + item.to_s(<span class="number">16</span>).rjust(<span class="number">2</span>,<span class="string">"0"</span>)&#125;.swapcase</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rgb</span><span class="params">(r, g, b)</span></span></span><br><span class="line">  <span class="string">"%.2X%.2X%.2X"</span> % [r,g,b].map&#123;<span class="params">|i|</span> [[i,<span class="number">255</span>].min,<span class="number">0</span>].max&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rgb</span><span class="params">(r, g, b)</span></span></span><br><span class="line">  [r, g, b].map <span class="keyword">do</span> <span class="params">|c|</span></span><br><span class="line">    <span class="keyword">if</span> c &lt;= <span class="number">0</span> </span><br><span class="line">      <span class="string">"00"</span></span><br><span class="line">    <span class="keyword">elsif</span> c &gt; <span class="number">255</span></span><br><span class="line">      <span class="string">"FF"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      c.to_s(<span class="number">16</span>).upcase    </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span>.join(<span class="string">''</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rgb</span><span class="params">(r, g, b)</span></span></span><br><span class="line">  [r, g, b].map&#123; <span class="params">|n|</span> [<span class="number">0</span>, n, <span class="number">255</span>].sort[<span class="number">1</span>].to_s(<span class="number">16</span>).upcase.rjust(<span class="number">2</span>, <span class="string">"0"</span>)&#125;.join</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rgb</span><span class="params">(r, g, b)</span></span></span><br><span class="line">  [r, g, b].map <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">    i = <span class="number">0</span> <span class="keyword">if</span> i &lt; <span class="number">0</span></span><br><span class="line">    i = <span class="number">255</span> <span class="keyword">if</span> i &gt; <span class="number">255</span></span><br><span class="line">    i.to_s(<span class="number">16</span>).rjust(<span class="number">2</span>, <span class="string">'0'</span>).upcase</span><br><span class="line">  <span class="keyword">end</span>.join</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> codewars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maximum subarray sum</title>
      <link href="/2018/02/22/Maximum-subarray-sum/"/>
      <url>/2018/02/22/Maximum-subarray-sum/</url>
      
        <content type="html"><![CDATA[<p>The maximum sum subarray problem consists in finding the maximum sum of a contiguous subsequence in an array or list of integers:</p><pre><code>maxSequence [-2, 1, -3, 4, -1, 2, 1, -5, 4]-- should be 6: [4, -1, 2, 1]</code></pre><p>Easy case is when the list is made up of only positive numbers and the maximum sum is the sum of the whole array. If the list is made up of only negative numbers, return 0 instead.</p><p>Empty list is considered to have zero greatest sum. Note that the empty list or array is also a valid sublist/subarray.</p><h3 id="Answers"><a href="#Answers" class="headerlink" title="Answers:"></a>Answers:</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_sequence</span><span class="params">(arr)</span></span></span><br><span class="line">  <span class="comment">#your code here</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> arr.empty?</span><br><span class="line">  curr_sum,max_sum = <span class="number">0</span>,-<span class="number">10000</span></span><br><span class="line">  arr.each <span class="keyword">do</span> <span class="params">|item|</span></span><br><span class="line">    <span class="keyword">if</span> curr_sum &lt; <span class="number">0</span> </span><br><span class="line">      curr_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    curr_sum = curr_sum + item</span><br><span class="line">    max_sum = curr_sum &gt; max_sum ? curr_sum : max_sum</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> max_sum</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_sequence</span><span class="params">(arr)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> (arr.length == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  running_sum = <span class="number">0</span>;</span><br><span class="line">  max_sum = arr[<span class="number">0</span>];</span><br><span class="line">  arr.each <span class="keyword">do</span> <span class="params">|v|</span></span><br><span class="line">    running_sum += v;</span><br><span class="line">    max_sum = running_sum <span class="keyword">if</span> (running_sum &gt; max_sum)</span><br><span class="line">    running_sum = <span class="number">0</span> <span class="keyword">if</span> (running_sum &lt; <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> max_sum</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_sequence</span><span class="params">(arr)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> arr.empty?</span><br><span class="line">  (<span class="number">1</span>..arr.size).flat_map &#123; <span class="params">|x|</span> arr.each_cons(x).to_a &#125;.max_by &#123; <span class="params">|x|</span> x.reduce(<span class="symbol">:+</span>) &#125;.reduce(<span class="symbol">:+</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> codewars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubstep</title>
      <link href="/2018/02/21/Dubstep/"/>
      <url>/2018/02/21/Dubstep/</url>
      
        <content type="html"><![CDATA[<p>Polycarpus works as a DJ in the best Berland nightclub, and he often uses dubstep music in his performance. Recently, he has decided to take a couple of old songs and make dubstep remixes from them.</p><p>Let’s assume that a song consists of some number of words. To make the dubstep remix of this song, Polycarpus inserts a certain number of words “WUB” before the first word of the song (the number may be zero), after the last word (the number may be zero), and between words (at least one between any pair of neighbouring words), and then the boy glues together all the words, including “WUB”, in one string and plays the song at the club.</p><p>For example, a song with words “I AM X” can transform into a dubstep remix as “WUBWUBIWUBAMWUBWUBX” and cannot transform into “WUBWUBIAMWUBX”.</p><p>Recently, Jonny has heard Polycarpus’s new dubstep track, but since he isn’t into modern music, he decided to find out what was the initial song that Polycarpus remixed. Help Jonny restore the original song.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The input consists of a single non-empty string, consisting only of uppercase English letters, the string’s length doesn’t exceed 200 characters</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Return the words of the initial song that Polycarpus used to make a dubsteb remix. Separate the words with a space.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><pre><code>song_decoder(&quot;WUBWEWUBAREWUBWUBTHEWUBCHAMPIONSWUBMYWUBFRIENDWUB&quot;)    #  =&gt;  WE ARE THE CHAMPIONS MY FRIEND</code></pre><h3 id="Answers"><a href="#Answers" class="headerlink" title="Answers:"></a>Answers:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def song_decoder(song)</span><br><span class="line">  song.split(&quot;WUB&quot;).delete_if  &#123; |item| item == &quot;&quot; &#125;.join(&quot; &quot;)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">def song_decoder(song)</span><br><span class="line">  song.gsub(/(WUB)+/, &apos; &apos;).strip</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">def song_decoder(song)</span><br><span class="line">  song.split(&quot;WUB&quot;).join(&quot; &quot;).split.join(&quot; &quot;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> codewars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Product of consecutive Fib numbers</title>
      <link href="/2018/02/20/Product-of-consecutive-Fib-numbers/"/>
      <url>/2018/02/20/Product-of-consecutive-Fib-numbers/</url>
      
        <content type="html"><![CDATA[<p>The Fibonacci numbers are the numbers in the following integer sequence (Fn):</p><pre><code>0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, ...</code></pre><p>such as</p><pre><code>F(n) = F(n-1) + F(n-2) with F(0) = 0 and F(1) = 1.</code></pre><p>Given a number, say prod (for product), we search two Fibonacci numbers F(n) and F(n+1) verifying</p><pre><code>F(n) * F(n+1) = prod.</code></pre><p>Your function productFib takes an integer (prod) and returns an array:</p><p>[F(n), F(n+1), true] or {F(n), F(n+1), 1} or (F(n), F(n+1), True)</p><p>depending on the language if F(n) * F(n+1) = prod.</p><p>If you don’t find two consecutive F(m) verifying F(m) * F(m+1) = prodyou will return</p><p>[F(m), F(m+1), false] or {F(n), F(n+1), 0} or (F(n), F(n+1), False)</p><p>F(m) being the smallest one such as F(m) * F(m+1) &gt; prod.<br>Examples</p><p>productFib(714) # should return [21, 34, true], </p><pre><code># since F(8) = 21, F(9) = 34 and 714 = 21 * 34</code></pre><p>productFib(800) # should return [34, 55, false], </p><pre><code># since F(8) = 21, F(9) = 34, F(10) = 55 and 21 * 34 &lt; 800 &lt; 34 * 55</code></pre><p>Notes: Not useful here but we can tell how to choose the number n up to which to go: we can use the “golden ratio” phi which is (1 + sqrt(5))/2 knowing that F(n) is asymptotic to: phi^n / sqrt(5). That gives a possible upper bound to n.</p><p>You can see examples in “Example test”.</p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">productFib</span><span class="params">(prod)</span></span></span><br><span class="line">  fn, fn1 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> fn*fn1 &lt; prod <span class="keyword">do</span></span><br><span class="line">    fn, fn1 = fn1, fn + fn1</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  [fn,fn1,fn*fn1 == prod]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">productFib</span><span class="params">(prod)</span></span></span><br><span class="line">  a, b = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">  <span class="keyword">while</span> prod &gt; a * b</span><br><span class="line">    a, b = [b, a + b]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  [a, b, prod == a * b]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">productFib</span><span class="params">(prod)</span></span></span><br><span class="line">  fib = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">  <span class="keyword">until</span> fib.reduce(<span class="symbol">:*</span>) &gt;= prod</span><br><span class="line">    fib &lt;&lt; fib.shift + fib.first</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  fib.reduce(<span class="symbol">:*</span>) == prod ? fib &lt;&lt; <span class="literal">true</span> : fib &lt;&lt; <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">productFib</span><span class="params">(prod)</span></span></span><br><span class="line">  a, b = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">  a, b = a + b, a <span class="keyword">while</span> a * b &lt; prod</span><br><span class="line">  [b, a, a * b == prod]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> codewars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reverse or rotate?</title>
      <link href="/2018/02/19/Reverse-or-rotate/"/>
      <url>/2018/02/19/Reverse-or-rotate/</url>
      
        <content type="html"><![CDATA[<p>The input is a string str of digits. Cut the string into chunks (a chunk here is a substring of the initial string) of size sz (ignore the last chunk if its size is less than sz).</p><p>If a chunk represents an integer such as the sum of the cubes of its digits is divisible by 2, reverse that chunk; otherwise rotate it to the left by one position. Put together these modified chunks and return the result as a string.</p><pre><code>Ifsz is &lt;= 0 or if str is empty return &quot;&quot;sz is greater (&gt;) than the length of str it is impossible to take a chunk of size sz hence return &quot;&quot;.</code></pre><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples:"></a>Examples:</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">revrot(<span class="string">"123456987654"</span>, <span class="number">6</span>) --&gt; <span class="string">"234561876549"</span></span><br><span class="line">revrot(<span class="string">"123456987653"</span>, <span class="number">6</span>) --&gt; <span class="string">"234561356789"</span></span><br><span class="line">revrot(<span class="string">"66443875"</span>, <span class="number">4</span>) --&gt; <span class="string">"44668753"</span></span><br><span class="line">revrot(<span class="string">"66443875"</span>, <span class="number">8</span>) --&gt; <span class="string">"64438756"</span></span><br><span class="line">revrot(<span class="string">"664438769"</span>, <span class="number">8</span>) --&gt; <span class="string">"67834466"</span></span><br><span class="line">revrot(<span class="string">"123456779"</span>, <span class="number">8</span>) --&gt; <span class="string">"23456771"</span></span><br><span class="line">revrot(<span class="string">""</span>, <span class="number">8</span>) --&gt; <span class="string">""</span></span><br><span class="line">revrot(<span class="string">"123456779"</span>, <span class="number">0</span>) --&gt; <span class="string">""</span> </span><br><span class="line">revrot(<span class="string">"563000655734469485"</span>, <span class="number">4</span>) --&gt; <span class="string">"0365065073456944"</span></span><br></pre></td></tr></table></figure><h3 id="Answers"><a href="#Answers" class="headerlink" title="Answers:"></a>Answers:</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#我的回答：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">revrot</span><span class="params">(str, sz)</span></span></span><br><span class="line">    <span class="comment"># your code</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span> <span class="keyword">if</span> sz &gt; str.size <span class="params">||</span> sz &lt;= <span class="number">0</span> <span class="params">||</span> str.empty?</span><br><span class="line">    arr = str.gsub(Regexp.new(<span class="string">"."</span>*sz)).to_a</span><br><span class="line">    new_arr = arr.map &#123;<span class="params">|item|</span> item.chars.map &#123;<span class="params">|t|</span> t.to_i**<span class="number">3</span>&#125;.reduce(<span class="symbol">:+</span>)%<span class="number">2</span>==<span class="number">0</span> ? item.reverse : item[<span class="number">1</span>..-<span class="number">1</span>] + item[<span class="number">0</span>]&#125;</span><br><span class="line">    new_arr.join</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#其他回答：</span></span><br><span class="line"><span class="comment">#----------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">revrot</span><span class="params">(str, sz)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">''</span> <span class="keyword">if</span> sz &lt;= <span class="number">0</span></span><br><span class="line">  chunks = str.scan(<span class="regexp">/.&#123;<span class="subst">#&#123;sz&#125;</span>&#125;/</span>)</span><br><span class="line">  chunks.map <span class="keyword">do</span> <span class="params">|chunk|</span></span><br><span class="line">    digits = chunk.chars</span><br><span class="line">    sum = digits.map &#123;<span class="params">|x|</span> x.to_i ** <span class="number">3</span> &#125;.inject(<span class="symbol">:+</span>)</span><br><span class="line">    sum.even? ? digits.reverse : digits.rotate</span><br><span class="line">  <span class="keyword">end</span>.join</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">#----------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">revrot</span><span class="params">(str, sz)</span></span></span><br><span class="line">  str.scan(<span class="regexp">/.&#123;<span class="subst">#&#123;sz&#125;</span>&#125;/</span>).map &#123; <span class="params">|s|</span> cubes_sum_even?(s.chars) &#125;.join</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cubes_sum_even?</span><span class="params">(arr)</span></span></span><br><span class="line">  arr.reduce(<span class="number">0</span>) &#123; <span class="params">|s, i|</span> s += i.to_i**<span class="number">3</span>&#125;.even? ? arr.join.reverse! : arr.rotate!(<span class="number">1</span>).join</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">#----------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">revrot</span><span class="params">(str, sz)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">''</span> <span class="keyword">if</span> str.empty? <span class="params">||</span> sz &lt;= <span class="number">0</span> <span class="params">||</span> sz &gt; str.length</span><br><span class="line">  str.scan(Regexp.new(<span class="string">"\\d&#123;<span class="subst">#&#123;sz&#125;</span>&#125;"</span>)).map &#123; <span class="params">|i|</span> i.chars.map(&amp;<span class="symbol">:to_i</span>).inject(&amp;<span class="symbol">:+</span>).even? ? i.reverse : lrotate(i) &#125;.join</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lrotate</span><span class="params">(str)</span></span></span><br><span class="line">  <span class="keyword">return</span> str <span class="keyword">if</span> str.<span class="literal">nil</span>? <span class="params">||</span> str.length &lt; <span class="number">2</span></span><br><span class="line">  str[<span class="number">1</span>...str.length] + str[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">#----------</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> codewars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unique In Order</title>
      <link href="/2018/02/18/Unique-In-Order/"/>
      <url>/2018/02/18/Unique-In-Order/</url>
      
        <content type="html"><![CDATA[<p>mplement the function unique_in_order which takes as argument a sequence and returns a list of items without any elements with the same value next to each other and preserving the original order of elements.</p><h3 id="For-example"><a href="#For-example" class="headerlink" title="For example:"></a>For example:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unique_in_order(&apos;AAAABBBCCDAABBB&apos;) == [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;A&apos;, &apos;B&apos;]</span><br><span class="line">unique_in_order(&apos;ABBCcAD&apos;)         == [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;c&apos;, &apos;A&apos;, &apos;D&apos;]</span><br><span class="line">unique_in_order([1,2,2,3,3])       == [1,2,3]</span><br></pre></td></tr></table></figure><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer:"></a>Answer:</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#我的回答：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unique_in_order</span><span class="params">(iterable)</span></span></span><br><span class="line">  <span class="comment">#your code here</span></span><br><span class="line">  arr = []</span><br><span class="line">  base_arr = []</span><br><span class="line">  <span class="keyword">if</span> iterable.<span class="keyword">class</span>.to_s == <span class="string">"String"</span></span><br><span class="line">    base_arr = iterable.chars</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    base_arr = iterable</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  base_arr.each &#123;<span class="params">|item|</span> arr &lt;&lt; item <span class="keyword">if</span> arr[-<span class="number">1</span>] != item&#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#大佬们的回答：</span></span><br><span class="line"><span class="comment">#1、</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unique_in_order</span><span class="params">(iterable)</span></span></span><br><span class="line">  (iterable.is_a?(String) ? iterable.chars : iterable).chunk &#123; <span class="params">|x|</span> x &#125;.map(&amp;<span class="symbol">:first</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">#2、</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unique_in_order</span><span class="params">(seq)</span></span></span><br><span class="line">  (<span class="number">0</span>...seq.length).reduce([]) &#123;<span class="params">|a, i|</span> seq[i] != a.last ? a &lt;&lt; seq[i] : a &#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">#3、</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unique_in_order</span><span class="params">(iterable)</span></span></span><br><span class="line">  it_array= []</span><br><span class="line">  iterable.length.times <span class="keyword">do</span> <span class="params">|x|</span></span><br><span class="line">    it_array &lt;&lt; iterable[x] <span class="keyword">if</span> iterable[x] != iterable[x+<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  it_array</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> codewars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Does my number look big in this?</title>
      <link href="/2018/02/17/Does-my-number-look-big-in-this/"/>
      <url>/2018/02/17/Does-my-number-look-big-in-this/</url>
      
        <content type="html"><![CDATA[<p>A Narcissistic Number is a number which is the sum of its own digits, each raised to the power of the number of digits.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">For example, take 153 (3 digits):</span><br><span class="line">    1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153</span><br><span class="line"></span><br><span class="line">and 1634 (4 digits):</span><br><span class="line"></span><br><span class="line">    1^4 + 6^4 + 3^4 + 4^4 = 1 + 1296 + 81 + 256 = 1634</span><br></pre></td></tr></table></figure><p>The Challenge:</p><p>Your code must return true or false depending upon whether the given number is a Narcissistic number.</p><p>Error checking for text strings or other invalid inputs is not required, only valid integers will be passed into the function.</p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer:"></a>Answer:</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#我的回答:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">narcissistic?</span><span class="params">( value )</span></span></span><br><span class="line">  <span class="comment"># Code me</span></span><br><span class="line">  sum = <span class="number">0</span></span><br><span class="line">  value.to_s.split(<span class="string">""</span>).each &#123;<span class="params">|item|</span> sum += item.to_i**value.to_s.size&#125;</span><br><span class="line">  value == sum</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#大佬们的回答:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">narcissistic?</span><span class="params">( value )</span></span></span><br><span class="line">  value == value.to_s.chars.map &#123; <span class="params">|x|</span> x.to_i**value.to_s.size &#125;.reduce(<span class="symbol">:+</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> codewars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Growth of a Population</title>
      <link href="/2018/02/17/Growth-of-a-Population/"/>
      <url>/2018/02/17/Growth-of-a-Population/</url>
      
        <content type="html"><![CDATA[<p>In a small town the population is p0 = 1000 at the beginning of a year. The population regularly increases by 2 percent per year and moreover 50 population regularly increases by 2 percent per year and moreover 50 new inhabitants per year come to live in the town. How many years does the town need to see its population greater or equal to p = 1200 inhabitants?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">At the end of the first year there will be: </span><br><span class="line">1000 + 1000 * 0.02 + 50 =&gt; 1070 inhabitants</span><br><span class="line"></span><br><span class="line">At the end of the 2nd year there will be: </span><br><span class="line">1070 + 1070 * 0.02 + 50 =&gt; 1141 inhabitants (number of inhabitants is an integer)</span><br><span class="line"></span><br><span class="line">At the end of the 3rd year there will be:</span><br><span class="line">1141 + 1141 * 0.02 + 50 =&gt; 1213</span><br><span class="line"></span><br><span class="line">It will need 3 entire years.</span><br></pre></td></tr></table></figure><p>More generally given parameters:</p><p>p0, percent, aug (inhabitants coming or leaving each year), p (population to surpass)</p><p>the function nb_year should return n number of entire years needed to get a population greater or equal to p.</p><p>aug is an integer, percent a positive or null number, p0 and p are positive integers (&gt; 0)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Examples:</span><br><span class="line">nb_year(1500, 5, 100, 5000) -&gt; 15</span><br><span class="line">nb_year(1500000, 2.5, 10000, 2000000) -&gt; 10</span><br><span class="line"></span><br><span class="line">Note: Don&apos;t forget to convert the percent parameter as a percentage in the body of your function: if the parameter percent is 2 you have to convert it to 0.02.</span><br></pre></td></tr></table></figure></p><p>Answer:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#我的回答：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nb_year</span><span class="params">(p<span class="number">0</span>, percent, aug, p, t=<span class="number">0</span>)</span></span></span><br><span class="line">    <span class="comment"># your code</span></span><br><span class="line">    p1 = p<span class="number">0</span> + p<span class="number">0</span>*percent/<span class="number">100</span> + aug</span><br><span class="line">    t += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> p1 &lt; p</span><br><span class="line">      nb_year(p1.to_i, percent, aug, p,t)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> t</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#大佬的回答</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nb_year</span><span class="params">(p<span class="number">0</span>, percent, aug, p)</span></span></span><br><span class="line">  percent = <span class="number">0</span> <span class="keyword">if</span> percent.<span class="literal">nil</span>?</span><br><span class="line">  n = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> p<span class="number">0</span> &lt; p</span><br><span class="line">    p<span class="number">0</span> = (p<span class="number">0</span> + p<span class="number">0</span> * percent * <span class="number">0</span>.<span class="number">01</span> + aug).to_i</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  n</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nb_year</span><span class="params">(p<span class="number">0</span>, percent, aug, p, year = <span class="number">0</span>)</span></span></span><br><span class="line">  <span class="keyword">return</span> year <span class="keyword">if</span> p<span class="number">0</span> &gt;= p</span><br><span class="line">  nb_year( ( p<span class="number">0</span> * ( <span class="number">1</span> + ( percent / <span class="number">100.0</span> ) ) + aug ).floor, percent, aug, p, year + <span class="number">1</span> )</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> codewars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Find the divisors! </title>
      <link href="/2018/02/17/Find-the-divisors/"/>
      <url>/2018/02/17/Find-the-divisors/</url>
      
        <content type="html"><![CDATA[<p>Create a function named divisors/Divisors that takes an integer and returns an array with all of the integer’s divisors(except for 1 and the number itself). If the number is prime return the string ‘(integer) is prime’ (null in C#) (use Either String a in Haskell and Result&lt;Vec<u32>, String&gt; in Rust).</u32></p><h3 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">divisors(12) # should return [2,3,4,6]</span><br><span class="line">divisors(25) # should return [5]</span><br><span class="line">divisors(13) # should return &quot;13 is prime&quot;</span><br></pre></td></tr></table></figure><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer:"></a>Answer:</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#大佬们的回答：</span></span><br><span class="line"><span class="comment">#1、</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divisors</span><span class="params">(n)</span></span></span><br><span class="line">  divisors = (<span class="number">2</span>...n).select&#123;<span class="params">|item|</span> n % item == <span class="number">0</span>&#125;</span><br><span class="line">  divisors.empty? ? <span class="string">"<span class="subst">#&#123;n&#125;</span> is prime"</span> : divisors</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">#2、</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'prime'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divisors</span><span class="params">(n)</span></span></span><br><span class="line">  n.prime? ? <span class="string">"<span class="subst">#&#123;n&#125;</span> is prime"</span> : (<span class="number">2</span>...n).select&#123;<span class="params">|i|</span>n%i==<span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> codewars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Format a string of names like &#39;Bart, Lisa &amp; Maggie&#39;.</title>
      <link href="/2018/02/14/Format-a-string-of-names-like-Bart-Lisa-Maggie/"/>
      <url>/2018/02/14/Format-a-string-of-names-like-Bart-Lisa-Maggie/</url>
      
        <content type="html"><![CDATA[<h2 id="Given-an-array-containing-hashes-of-names"><a href="#Given-an-array-containing-hashes-of-names" class="headerlink" title="Given: an array containing hashes of names"></a>Given: an array containing hashes of names</h2><p>Return: a string formatted as a list of names separated by commas except for the last two names, which should be separated by an ampersand.</p><p>Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">list([ &#123;name: <span class="string">'Bart'</span>&#125;, &#123;name: <span class="string">'Lisa'</span>&#125;, &#123;name: <span class="string">'Maggie'</span>&#125; ])</span><br><span class="line"><span class="comment"># returns 'Bart, Lisa &amp; Maggie'</span></span><br><span class="line"></span><br><span class="line">list([ &#123;name: <span class="string">'Bart'</span>&#125;, &#123;name: <span class="string">'Lisa'</span>&#125; ])</span><br><span class="line"><span class="comment"># returns 'Bart &amp; Lisa'</span></span><br><span class="line"></span><br><span class="line">list([ &#123;name: <span class="string">'Bart'</span>&#125; ])</span><br><span class="line"><span class="comment"># returns 'Bart'</span></span><br><span class="line"></span><br><span class="line">list([])</span><br><span class="line"><span class="comment"># returns ''</span></span><br></pre></td></tr></table></figure></p><p>Answers:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#大佬们的回答</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(names)</span></span></span><br><span class="line">  names.map(&amp;<span class="symbol">:values</span>).join(<span class="string">', '</span>).reverse.sub(<span class="regexp">/,/</span>, <span class="string">'&amp; '</span>).reverse</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> codewars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用 Git 命令清单</title>
      <link href="/2018/01/24/%E5%B8%B8%E7%94%A8-Git-%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/"/>
      <url>/2018/01/24/%E5%B8%B8%E7%94%A8-Git-%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一、-新建代码库"><a href="#一、-新建代码库" class="headerlink" title="一、 新建代码库"></a>一、 新建代码库</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><h3 id="二、-配置"><a href="#二、-配置" class="headerlink" title="二、 配置"></a>二、 配置</h3><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">"[name]"</span></span><br><span class="line">$ git config [--global] user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></table></figure><h3 id="三、-增加-删除文件"><a href="#三、-增加-删除文件" class="headerlink" title="三、 增加/删除文件"></a>三、 增加/删除文件</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h3 id="四、-代码提交"><a href="#四、-代码提交" class="headerlink" title="四、 代码提交"></a>四、 代码提交</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h3 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h3 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h3 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h3 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h3 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rails 使用mongoid进行模糊查询</title>
      <link href="/2017/06/07/rails-%E4%BD%BF%E7%94%A8mongoid%E8%BF%9B%E8%A1%8C%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/"/>
      <url>/2017/06/07/rails-%E4%BD%BF%E7%94%A8mongoid%E8%BF%9B%E8%A1%8C%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>使用mongoid进行查询时查询的字段需要使用正则表达进行查询<br>例如查询图书名字中包含ruby的书籍可以使用<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Book.where(<span class="symbol">name:</span> /ruby/)</span><br></pre></td></tr></table></figure></p><p>一句话进行多条件模糊搜索</p><pre><code class="ruby"><span class="function"><span class="keyword">def</span> <span class="title">index</span> </span>  conditions = {}   <span class="string">%w{name author book_type }</span>.each{<span class="params">|attr|</span>     conditions[attr]=Regexp.new(params[attr]) <span class="keyword">unless</span> params[attr].blank?    }   @books = Book.where(conditions).order(<span class="string">"updated_at DESC"</span>) <span class="keyword">end</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> rails </tag>
            
            <tag> mongodb </tag>
            
            <tag> 模糊查询 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
